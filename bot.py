import logging
import sqlite3
from datetime import datetime, timedelta, time

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

API_TOKEN = "7635434708:AAE7b9t_O5XTAHqf8BB4STjMcGDtM9ygT-Y"
ADMIN_ID = 7031989165  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

logging.basicConfig(level=logging.INFO)
from aiogram.client.default import DefaultBotProperties
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# ========== FSM ==========
class Booking(StatesGroup):
    choosing_date = State()
    choosing_duration = State()
    choosing_time = State()
    entering_name = State()
    entering_phone = State()
    confirming = State()

# ========== –ë–ê–ó–ê ==========
conn = sqlite3.connect("bookings.db")
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS bookings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        phone TEXT,
        date TEXT,
        start_time TEXT,
        duration INTEGER,
        status TEXT
    )
""")
conn.commit()
from aiogram.utils.markdown import hbold

# ==== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∞—Ç–∞–º–∏ (7 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥) ====
def date_keyboard():
    builder = InlineKeyboardBuilder()
    today = datetime.today()
    for i in range(7):
        day = today + timedelta(days=i)
        date_str = day.strftime("%Y-%m-%d")
        btn_text = day.strftime("%d %b (%a)")
        builder.button(text=btn_text, callback_data=f"date:{date_str}")
    builder.adjust(2)
    return builder.as_markup()

# ==== –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã: 1‚Äì4 —á–∞—Å–∞ ====
def duration_keyboard():
    builder = InlineKeyboardBuilder()
    for i in range(1, 5):
        builder.button(text=f"{i} —á–∞—Å(–∞)", callback_data=f"dur:{i}")
    builder.adjust(2)
    return builder.as_markup()

# ==== /start ====
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(
        f"{hbold('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')} üßñ‚Äç‚ôÇÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=date_keyboard()
    )
    await state.clear()
    await state.set_state(Booking.choosing_date)

# ==== –í—ã–±–æ—Ä –¥–∞—Ç—ã ====
@dp.callback_query(StateFilter(Booking.choosing_date), F.data.startswith("date:"))
async def date_chosen(callback: CallbackQuery, state: FSMContext):
    date = callback.data.split(":")[1]
    await state.update_data(date=date)
    await callback.message.edit_text(f"–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {date}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã:", reply_markup=duration_keyboard())
    await state.set_state(Booking.choosing_duration)

# ==== –í—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ====
@dp.callback_query(StateFilter(Booking.choosing_duration), F.data.startswith("dur:"))
async def duration_chosen(callback: CallbackQuery, state: FSMContext):
    duration = int(callback.data.split(":")[1])
    await state.update_data(duration=duration)
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {duration} —á–∞—Å(–∞).\n–ò–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤...")

    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ—Ç–æ–≤
    await show_free_time_slots(callback, state)
# ==== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ ====
async def show_free_time_slots(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    date = data["date"]
    duration = data["duration"]

    WORK_START = 10  # 10:00
    WORK_END = 22    # 22:00

    # –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —á–∞—Å—ã –Ω–∞—á–∞–ª–∞
    possible_slots = []
    for hour in range(WORK_START, WORK_END - duration + 1):
        possible_slots.append(time(hour=hour).strftime("%H:%M"))

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–∂–µ –∑–∞–Ω—è—Ç—ã–µ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
    cursor.execute("SELECT start_time, duration FROM bookings WHERE date = ? AND status != '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ'", (date,))
    bookings = cursor.fetchall()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    busy_hours = []
    for start, dur in bookings:
        start_hour = int(start.split(":")[0])
        for h in range(start_hour, start_hour + dur):
            busy_hours.append(h)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ
    free_slots = []
    for hour in range(WORK_START, WORK_END - duration + 1):
        if all((hour + i) not in busy_hours for i in range(duration)):
            free_slots.append(time(hour=hour).strftime("%H:%M"))

    if not free_slots:
        await callback.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    builder = InlineKeyboardBuilder()
    for slot in free_slots:
        builder.button(text=slot, callback_data=f"time:{slot}")
    builder.adjust(2)
    await callback.message.edit_text(
        f"‚úÖ –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ {date} –¥–ª—è {duration} —á:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(Booking.choosing_time)

# ==== –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ ====
@dp.callback_query(StateFilter(Booking.choosing_time), F.data.startswith("time:"))
async def time_chosen(callback: CallbackQuery, state: FSMContext):
    time_start = callback.data.split(":")[1]
    await state.update_data(start_time=time_start)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(Booking.entering_name)
# ==== –í–≤–æ–¥ –∏–º–µ–Ω–∏ ====
@dp.message(StateFilter(Booking.entering_name))
async def name_entered(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +77001234567):")
    await state.set_state(Booking.entering_phone)

# ==== –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ====
@dp.message(StateFilter(Booking.entering_phone))
async def phone_entered(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()

    text = (
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {data['start_time']} –Ω–∞ {data['duration']} —á\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_booking"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking")
        ]
    ])
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(Booking.confirming)

# ==== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ====
@dp.callback_query(StateFilter(Booking.confirming), F.data == "confirm_booking")
async def confirm_booking(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    cursor.execute("""
        INSERT INTO bookings (name, phone, date, start_time, duration, status)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (data["name"], data["phone"], data["date"], data["start_time"], data["duration"], "–æ–∂–∏–¥–∞–µ—Ç"))
    conn.commit()
    booking_id = cursor.lastrowid

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    text = (
        f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{booking_id}</b>\n"
        f"üìÖ {data['date']}\n"
        f"‚è∞ {data['start_time']} –Ω–∞ {data['duration']} —á\n"
        f"üë§ {data['name']}\n"
        f"üì± {data['phone']}"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm:{booking_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject:{booking_id}")
        ]
    ])
    await bot.send_message(ADMIN_ID, text, reply_markup=keyboard)

    await callback.message.edit_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await state.clear()

# ==== –û—Ç–º–µ–Ω–∞ ====
@dp.callback_query(StateFilter(Booking.confirming), F.data == "cancel_booking")
async def cancel_booking(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
# ==== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–æ–º ====
@dp.callback_query(F.data.startswith("admin_confirm:"))
async def admin_confirm(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    booking_id = callback.data.split(":")[1]
    cursor.execute("UPDATE bookings SET status = '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' WHERE id = ?", (booking_id,))
    conn.commit()

    await callback.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{booking_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

# ==== –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–æ–º ====
@dp.callback_query(F.data.startswith("admin_reject:"))
async def admin_reject(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    booking_id = callback.data.split(":")[1]
    cursor.execute("UPDATE bookings SET status = '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ' WHERE id = ?", (booking_id,))
    conn.commit()

    await callback.message.edit_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{booking_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
# ==== /admin - —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ====
@dp.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    today = datetime.today().strftime("%Y-%m-%d")
    cursor.execute("SELECT id, name, phone, start_time, duration, status FROM bookings WHERE date = ?", (today,))
    rows = cursor.fetchall()

    if not rows:
        await message.answer("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return

    text = f"<b>–ó–∞—è–≤–∫–∏ –Ω–∞ {today}:</b>\n\n"
    for row in rows:
        text += (
            f"#{row[0]} | {row[3]}‚Äì{int(row[3].split(':')[0]) + row[4]}:00 | {row[5]}\n"
            f"üë§ {row[1]} | üì± {row[2]}\n\n"
        )
    await message.answer(text)
import asyncio

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
 
